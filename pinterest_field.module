<?php

/**
 * @file pinterest_field.module
 * TODO: Enter file description here.
 */


/**
 * Implements hook_help().
 */
function pinterest_field_help($path, $arg) {
  switch ($path) {
    case 'admin/help#pinterest_field':
      return t("Add the Pinterest username into the text field provided by the module. On display, the Pinterest widget will be displayed for that user");
    // OPTIONAL: Add additional cases for other paths that should display help text.
  }
}

/**
 * Implements hook_field_info().
 */
function pinterest_field_field_info() {
  return array(
    'pinterest_field' => array(
      'label' => t('Pinterest'),
      'description' => t('This field stores a Pinterest username/board ID in the database.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'pinterest_field_profile_widget',
      'default_formatter' => 'pinterest_field_profile_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function pinterest_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * Implements hook_field_is_empty().
 */
function pinterest_field_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function pinterest_field_field_widget_info() {
  return array(
    'pinterest_field_profile_widget' => array(
      'label' => t('Profile widget'),
      'field types' => array('pinterest_field'),
      'settings' => array('size' => 60),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    'pinterest_field_board_widget' => array(
      'label' => t('Board widget'),
      'field types' => array('pinterest_field'),
      'settings' => array('size' => 60),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      )
    )
  );
}

/**
 * Implements hook_field_widget_form().
 */
function pinterest_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'pinterest_field_board_widget':
      $element += array(
        'pinterest_boardname' => array(
          '#type' => 'textfield',
          '#title' => t('Board name'),
          '#description' => t('Enter the board name that you wish to show.')
        )
      );
    // This is a DELIBERATE fall-through. The board widget still requires a username, so don't bother duplicating code.
    case 'pinterest_field_profile_widget':
      $element += array(
        'pinterest_username' => array(
          '#type' => 'textfield',
          '#title' => t('Pinterest username'),
          '#description' => t('This is the Pinterest username.'),
        )
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function pinterest_field_field_formatter_info() {
  return array(
    'pinterest_default' => array(
      'label' => t('Default'),
      'field types' => array(
        'pinterest_field'
      )
    )
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function pinterest_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'sample_field_formatter_simple':
      // Common case: each value is displayed individually in a sub-element
      // keyed by delta. The field.tpl.php template specifies the markup
      // wrapping each value.
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $settings['some_setting'] . $item['value']);
      }
      break;

    case 'sample_field_formatter_themeable':
      // More elaborate formatters can defer to a theme function for easier
      // customization.
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'mymodule_theme_sample_field_formatter_themeable',
          '#data' => $item['value'],
          '#some_setting' => $settings['some_setting'],
        );
      }
      break;

    case 'sample_field_formatter_combined':
      // Some formatters might need to display all values within a single piece
      // of markup.
      $rows = array();
      foreach ($items as $delta => $item) {
        $rows[] = array($delta, $item['value']);
      }
      $element[0] = array(
        '#theme' => 'table',
        '#header' => array(t('Delta'), t('Value')),
        '#rows' => $rows,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_settings_form().
 */
function pinterest_field_field_settings_form($field, $instance, $has_data) {
  // There are no settings
  // @ToDo: Remove this before tagging if it's not used
}

/**
 * Implements hook_field_instance_settings_form().
 */
function pinterest_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form = array();
/*
  $form['text_processing'] = array(
    '#type' => 'radios',
    '#title' => t('Text processing'),
    '#default_value' => $settings['text_processing'],
    '#options' => array(
      t('Plain text'),
      t('Filtered text (user selects text format)'),
    ),
  );
  if ($field['type'] == 'text_with_summary') {
    $form['display_summary'] = array(
      '#type' => 'select',
      '#title' => t('Display summary'),
      '#options' => array(
        t('No'),
        t('Yes'),
      ),
      '#description' => t('Display the summary to allow the user to input a summary value. Hide the summary to automatically fill it with a trimmed portion from the main post.'),
      '#default_value' => !empty($settings['display_summary']) ? $settings['display_summary'] :  0,
    );
  }
*/
  return $form;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function pinterest_field_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form = array();

  return $form;
}

